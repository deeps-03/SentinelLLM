# Kubernetes Deployment for SentinelLLM with Loki Integration
# Handles 10,000+ events/second with auto-scaling

apiVersion: v1
kind: Namespace
metadata:
  name: sentinellm
---
# ConfigMap for Loki Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: sentinellm
data:
  loki.yml: |
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
      log_level: info
    
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    ingester:
      wal:
        enabled: true
        dir: /loki/wal
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 5m
      chunk_block_size: 262144
      chunk_target_size: 2097152
      chunk_retain_period: 30s
      max_chunk_age: 1h
      concurrent_flushes: 16
      flush_check_period: 10s
    
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_strategy: local
      ingestion_rate_mb: 100
      ingestion_burst_size_mb: 200
      max_line_size: 0
      max_streams_per_user: 50000
      max_global_streams_per_user: 50000
      unordered_writes: true
      per_stream_rate_limit: 100MB
      per_stream_rate_limit_burst: 200MB
    
    compactor:
      working_directory: /loki/compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150
    
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
---
# PersistentVolumeClaim for Loki storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage
  namespace: sentinellm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: sentinellm
  labels:
    app: loki
spec:
  replicas: 2
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.0
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9096
          name: grpc
        volumeMounts:
        - name: config
          mountPath: /etc/loki
        - name: storage
          mountPath: /loki
        args:
        - -config.file=/etc/loki/loki.yml
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: loki-config
      - name: storage
        persistentVolumeClaim:
          claimName: loki-storage
---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: sentinellm
  labels:
    app: loki
spec:
  selector:
    app: loki
  ports:
  - name: http
    port: 3100
    targetPort: 3100
  - name: grpc
    port: 9096
    targetPort: 9096
  type: ClusterIP
---
# Loki-Kafka Forwarder Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-forwarder
  namespace: sentinellm
  labels:
    app: loki-forwarder
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loki-forwarder
  template:
    metadata:
      labels:
        app: loki-forwarder
    spec:
      containers:
      - name: loki-forwarder
        image: sentinellm/loki-forwarder:latest
        env:
        - name: LOKI_URL
          value: "http://loki:3100"
        - name: KAFKA_SERVERS
          value: "kafka:9092"
        - name: KAFKA_TOPIC
          value: "raw-logs"
        - name: BATCH_SIZE
          value: "200"
        - name: RATE_LIMIT
          value: "2000"
        - name: QUERY_INTERVAL
          value: "5"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
---
# HorizontalPodAutoscaler for Loki Forwarder
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: loki-forwarder-hpa
  namespace: sentinellm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: loki-forwarder
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics for log ingestion rate
  - type: Object
    object:
      metric:
        name: loki_ingestion_rate
      target:
        type: AverageValue
        averageValue: "5000"
      describedObject:
        apiVersion: v1
        kind: Service
        name: loki
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# Kafka Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: sentinellm
  labels:
    app: kafka
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_NUM_PARTITIONS
          value: "12"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_COMPRESSION_TYPE
          value: "gzip"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: kafka-storage
          mountPath: /var/lib/kafka/data
      volumes:
      - name: kafka-storage
        persistentVolumeClaim:
          claimName: kafka-storage
---
# PersistentVolumeClaim for Kafka
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-storage
  namespace: sentinellm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: fast-ssd
---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: sentinellm
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
  - name: kafka
    port: 9092
    targetPort: 9092
  type: ClusterIP
---
# Zookeeper Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: sentinellm
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
---
# Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: sentinellm
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
  - name: zookeeper
    port: 2181
    targetPort: 2181
  type: ClusterIP
---
# VictoriaMetrics Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: victoria-metrics
  namespace: sentinellm
  labels:
    app: victoria-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: victoria-metrics
  template:
    metadata:
      labels:
        app: victoria-metrics
    spec:
      containers:
      - name: victoria-metrics
        image: victoriametrics/victoria-metrics:v1.93.0
        ports:
        - containerPort: 8428
        args:
        - -storageDataPath=/victoria-metrics-data
        - -retentionPeriod=30d
        - -memory.allowedPercent=80
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: victoria-storage
          mountPath: /victoria-metrics-data
      volumes:
      - name: victoria-storage
        persistentVolumeClaim:
          claimName: victoria-storage
---
# PersistentVolumeClaim for VictoriaMetrics
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: victoria-storage
  namespace: sentinellm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
# VictoriaMetrics Service
apiVersion: v1
kind: Service
metadata:
  name: victoria-metrics
  namespace: sentinellm
  labels:
    app: victoria-metrics
spec:
  selector:
    app: victoria-metrics
  ports:
  - name: http
    port: 8428
    targetPort: 8428
  type: ClusterIP
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: sentinellm
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
---
# PersistentVolumeClaim for Grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: sentinellm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: sentinellm
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: LoadBalancer
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: sentinellm
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=15d
        - --web.enable-lifecycle
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-config
          mountPath: /etc/prometheus
      volumes:
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      - name: prometheus-config
        configMap:
          name: prometheus-config
---
# PersistentVolumeClaim for Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: sentinellm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: sentinellm
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - name: http
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
# ConfigMap for Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: sentinellm
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "alert_rules.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'loki'
        static_configs:
          - targets: ['loki:3100']
      
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka:9092']
      
      - job_name: 'victoria-metrics'
        static_configs:
          - targets: ['victoria-metrics:8428']
      
      - job_name: 'loki-forwarder'
        static_configs:
          - targets: ['loki-forwarder:8080']
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
  
  alert_rules.yml: |
    groups:
    - name: sentinellm-alerts
      rules:
      - alert: HighLokiIngestionRate
        expr: rate(loki_ingester_samples_received_total[1m]) > 8000
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High Loki ingestion rate"
          description: "Loki ingestion rate is {{ $value }} logs/sec"
      
      - alert: KafkaConsumerLag
        expr: kafka_consumer_lag_sum > 10000
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High Kafka consumer lag"
          description: "Consumer lag is {{ $value }} messages"