# =============================================================================
# SentinelLLM Configuration
# =============================================================================

# -----------------------------------------------------------------------------
# Core Configuration
# -----------------------------------------------------------------------------
# Kafka broker configuration
KAFKA_BROKER=kafka:9093

# Kafka topics
RAW_LOGS_TOPIC=raw-logs
CLASSIFIED_LOGS_TOPIC=classified-logs
ANOMALIES_TOPIC=anomalies

# Retry configuration for all services
MAX_RETRIES=5
RETRY_DELAY_SECONDS=5

# -----------------------------------------------------------------------------
# Google Gemini API Configuration (Required for log classification)
# -----------------------------------------------------------------------------
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your-google-gemini-api-key-here

# -----------------------------------------------------------------------------
# AWS CloudWatch Logs Configuration (Optional - for AWS log ingestion)
# -----------------------------------------------------------------------------
# AWS credentials - get these from AWS IAM
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# AWS region where your CloudWatch logs are located
AWS_REGION=us-east-1

# Comma-separated list of CloudWatch log groups to monitor
# Example: /aws/lambda/my-function,/aws/ec2/my-app,/aws/apigateway/my-api
AWS_LOG_GROUPS=/aws/lambda/example-function,/aws/ec2/my-app

# How often to poll AWS CloudWatch for new logs (in seconds)
AWS_POLL_INTERVAL_SECONDS=30

# -----------------------------------------------------------------------------
# Azure Monitor Configuration (Optional - for Azure log ingestion)
# -----------------------------------------------------------------------------
# Azure Service Principal credentials
# Create a service principal with Log Analytics Reader permissions
AZURE_TENANT_ID=your-azure-tenant-id
AZURE_CLIENT_ID=your-azure-client-id
AZURE_CLIENT_SECRET=your-azure-client-secret

# Azure Log Analytics Workspace ID
# Found in Azure portal under Log Analytics workspace > Overview
AZURE_WORKSPACE_ID=your-log-analytics-workspace-id

# KQL query for retrieving logs - customize based on your needs
# Examples:
# - All logs from last hour: union * | where TimeGenerated > ago(1h) | order by TimeGenerated desc | limit 100
# - Application logs only: AppTraces | where TimeGenerated > ago(1h) | order by TimeGenerated desc | limit 100
# - Error logs only: union * | where TimeGenerated > ago(1h) and (Level == "Error" or SeverityLevel >= 3) | order by TimeGenerated desc | limit 100
AZURE_QUERY=union * | where TimeGenerated > ago(1h) | order by TimeGenerated desc | limit 100

# How often to poll Azure Monitor for new logs (in seconds)
AZURE_POLL_INTERVAL_SECONDS=60

# -----------------------------------------------------------------------------
# Email Notification Configuration (Optional - for email alerts)
# -----------------------------------------------------------------------------
# SMTP server configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USE_TLS=true

# SMTP authentication
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# Email settings
EMAIL_FROM=sentinellm@yourcompany.com
# Comma-separated list of email recipients
EMAIL_RECIPIENTS=admin@yourcompany.com,ops-team@yourcompany.com

# Whether to send emails for preventive_action alerts (default: false)
SEND_PREVENTIVE_EMAILS=false

# -----------------------------------------------------------------------------
# Microsoft Teams Configuration (Optional - for Teams notifications)
# -----------------------------------------------------------------------------
# Teams incoming webhook URL
# Create one in Teams: Go to channel > Connectors > Incoming Webhook
TEAMS_WEBHOOK_URL=https://yourcompany.webhook.office.com/webhookb2/your-webhook-id

# -----------------------------------------------------------------------------
# Alert Configuration
# -----------------------------------------------------------------------------
# Anomaly detection threshold (0.0 to 1.0+)
# Higher values = fewer false positives, lower values = more sensitive
ANOMALY_THRESHOLD=0.8

# Deduplication window in minutes - suppress duplicate alerts within this timeframe
DEDUP_WINDOW_MINUTES=15

# Base URL for Grafana dashboard links in alerts
GRAFANA_BASE_URL=http://localhost:3000

# -----------------------------------------------------------------------------
# Grafana API Configuration (Optional - for anomaly detector annotations)
# -----------------------------------------------------------------------------
# Grafana API key for creating annotations
# Create in Grafana: Configuration > API Keys > Add API key (Editor role)
GRAFANA_API_KEY=your-grafana-api-key

# =============================================================================
# Service Profiles Configuration
# =============================================================================
# 
# The docker-compose.yml uses profiles to optionally enable services:
#
# Start all services:
#   docker-compose --profile aws --profile azure up -d --build
#
# Start only core services (no cloud log ingestion):
#   docker-compose up -d --build
#
# Start with AWS log ingestion only:
#   docker-compose --profile aws up -d --build
#
# Start with Azure log ingestion only:
#   docker-compose --profile azure up -d --build
#
# =============================================================================

# =============================================================================
# Quick Start Examples
# =============================================================================
#
# 1. Basic setup (local logs only):
#    - Set GEMINI_API_KEY
#    - Optionally set GRAFANA_API_KEY
#    - Run: docker-compose up -d --build
#
# 2. With email notifications:
#    - Configure all SMTP_* and EMAIL_* variables
#    - Run: docker-compose up -d --build
#
# 3. With Teams notifications:
#    - Set TEAMS_WEBHOOK_URL
#    - Run: docker-compose up -d --build
#
# 4. With AWS CloudWatch:
#    - Configure all AWS_* variables
#    - Run: docker-compose --profile aws up -d --build
#
# 5. With Azure Monitor:
#    - Configure all AZURE_* variables
#    - Run: docker-compose --profile azure up -d --build
#
# 6. Full setup (all features):
#    - Configure all variables above
#    - Run: docker-compose --profile aws --profile azure up -d --build
#
# =============================================================================
